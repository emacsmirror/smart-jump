#+TITLE: Smart Jump

[[https://travis-ci.org/jojojames/smart-jump][file:https://travis-ci.org/jojojames/smart-jump.svg?branch=master]]
[[https://melpa.org/#/smart-jump][file:https://melpa.org/packages/smart-jump-badge.svg]]

* About
  This packages tries to smartly go to definition leveraging several methods to
  do so.

  If one method fails, this package will go on to the next one, eventually
  falling back to the default xref.

* Install
  Install using ~use-package~.

  #+begin_src emacs-lisp :tangle yes
    (use-package smart-jump :ensure t)
  #+end_src

  Take a look at the examples below to ~register~ a ~smart-jump~ and then use it
  with the standard jump keys. (e.g. ~M-., M-, M-?~).

  Alternatively, clone this repo, add it to Emacs' ~load-path~ and then require
  ~smart-jump~.

  There's also some ready made ~smart-jumps~. Just call ~smart-jump-setup-default-registers.~

  #+begin_src emacs-lisp :tangle yes
    (use-package smart-jump
      :ensure t
      :config
      (smart-jump-setup-default-registers))
  #+end_src

* Examples
** Bare minimum example
   Sets up smart-jump for python-mode with anaconda. smart-jump will first
   attempt to jump using anaconda and, falling back to xref if anaconda fails.

   #+begin_src emacs-lisp :tangle yes
  (smart-jump-register :modes 'python-mode
                       :jump-fn 'anaconda-mode-find-definitions
                       :pop-fn 'anaconda-mode-go-back
                       :refs-fn 'anaconda-mode-find-references
                       :should-jump #'smart-jump-python-anaconda-available-p
                       :heuristic 'point
                       :async 600)
   #+end_src
** Multiple modes
   Sets up smart-jump for both emacs-lisp-mode and lisp-interaction-mode.
   #+begin_src emacs-lisp :tangle yes
   (smart-jump-register :modes '(emacs-lisp-mode lisp-interaction-mode)
                        :jump-fn 'elisp-slime-nav-find-elisp-thing-at-point
                        :pop-fn 'pop-tag-mark
                        :should-jump t
                        :heuristic 'error
                        :async nil)
   #+end_src
** Supporting Asynchronous Functions
   Sometimes GoToDefinition is written in an asynchronous fashion which makes it
   tricky to fallback to the next GoToDefinition method. This package supports
   that case. Just set the ~:async~ parameter.
   #+begin_src emacs-lisp :tangle yes
   (smart-jump-register :modes 'java-mode
                        :jump-fn 'ggtags-find-tag-dwim
                        :pop-fn 'ggtags-prev-mark
                        :should-jump t
                        :heuristic 'point
                        :async t)

   #+end_src

   #+begin_src emacs-lisp :tangle yes
   ;; This sets a custom timeout.
   (smart-jump-register :modes 'csharp-mode
                        :jump-fn 'omnisharp-go-to-definition
                        :pop-fn 'pop-tag-mark
                        :should-jump t
                        :heuristic 'point
                        :async 500)
   #+end_src
** Finding References with Fallback
   #+begin_src emacs-lisp :tangle yes
  (smart-jump-register :modes 'tide-mode
                       :jump-fn 'tide-jump-to-definition
                       :pop-fn 'tide-jump-back
                       :refs-fn 'tide-references
                       :should-jump t
                       :heuristic 'point
                       :async t)
   #+end_src
** A more complex example
   Register different GoToDefinition functions with c-mode.

   #+begin_src emacs-lisp :tangle yes
  (smart-jump-register :modes '(c-mode c++-mode)
                       :jump-fn 'ggtags-find-tag-dwim
                       :pop-fn 'ggtags-prev-mark
                       :refs-fn 'ggtags-find-reference
                       :should-jump t
                       :heuristic 'point
                       :async 500
                       :order 2)

  (smart-jump-register :modes '(c-mode c++-mode)
                       :jump-fn 'rtags-find-symbol-at-point
                       :pop-fn 'rtags-location-stack-back
                       :refs-fn 'rtags-find-all-references-at-point
                       :should-jump (lambda ()
                                      (and
                                       (fboundp 'rtags-executable-find)
                                       (rtags-executable-find "rc")
                                       (rtags-is-indexed)))
                       :heuristic 'point
                       :async 500
                       :order 1)
   #+end_src

   In this case, the fallback strategy is ->

   - For Jumping
   ~rtags-find-symbol-at-point~ -> ~ggtags-find-tag-dwim~ -> ~xref~

   - For Finding References
   ~rtags-find-all-references-at-point~ -> ~ggtags-find-reference~ -> ~smart-jump-simple-find-references~

   The ~:order~ keyword in this case designates the sort order of the jumps.

   Take a look at [[file:examples.org][this for more examples.]]

* Screenshots
  Peek to Definition
  [[./screenshots/peek.png]]
* Help Wanted :)
  Look into issue tracker!
  Add tests!
  Add more default ~smart-jump~ registers.
* Running Tests
  #+begin_src sh :tangle yes
  cask
  make test
  make lint
  make compile
  #+end_src
